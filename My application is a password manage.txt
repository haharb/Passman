My application is a password manager

The main selling point of this application is how secure it is, and its pretty convenient to use as well.

Next.js web development framework
React.js for the front end 

Node.js runtime environment

Fastify for the web framework due to it having little overhead and powerful plugins

TypeScript used as the programming language

algorithms used:
- sha256 for hashing the passwords 
- aes256 for encrypting and decrypting the manager's data
- pbkdf2 which is a pseudorandom hash algorithm similar to hmac, that takes in a salt and generates a manager key 
- argon2 for unpredictable password hashing for the database


Data flow:

- user registers and the password is then hashed with SHA256
- The server then hashes the password with argon2, creates the user and salt for the manager, and then creates the manager itself
- when the user logs in, the password is then again hashed with SHA255
- the server then retrieves the user from the database with the username and compares the hash values, then retrieves the manager data for that specific user, and sends back the encrypted manager, the manager's salt, the user and 
- user will then generate their own manager key using their username hashed password and manager salt, and the pbkdf2 function.
- Then will decrypt the manager with its key using AES 
- Make any changes to the manager data, save the data, and then encrypt the manager again with the key and send it back.
- Finally, the access token is checked by the server and then saves the received encrypted manager.



Login page:

